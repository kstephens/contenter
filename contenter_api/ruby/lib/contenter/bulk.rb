module Contenter
  # Represents bulk content.
  class Bulk
    # Options.
    attr_accessor :options

    # The document Hash to be rendered as YAML.
    attr_accessor :document


    def initialize options = nil
      options ||= { }
      @options = options
      @document = options[:document] || { }
      @document[:api_version] ||= 1
      @document[:contents_columns] ||=
        [
         :uuid,
         :version,
         :content_status,
         :content_type,
         :content_key,
         :language,
         :country,
         :brand,
         :application,
         :mime_type,
         :md5sum,
         :data,
        ]
    end


    def contents
      @document[:contents]
    end


    def render_csv fh = nil
      raise Exception, "not implemented"
    end


    # Renders YAML document representing the content
    # as an array of arrays with list of column names.
    def render_yaml fh = nil
      fh ||= StringIO.new

      cols = document[:contents_columns] || (raise ArgumentError, 'no contents_columns')

      fh.puts <<"END"
# THIS IS UTF-8 YAML: CHECK YOUR EDITOR SETTINGS BEFORE EDITING IT!
# GENERATED BY #{self.class.name}#render_yaml
--- 
:api_version: #{document[:api_version]}
END
      if x = document[:action]
        fh.puts ":action: #{x.to_s.inspect}" 
      end

      if x = document[:comment]
        fh.puts ":comment: #{x.to_s.inspect}" 
      end

      if x = document[:errors]
        fh.puts ":errors: #{x.inspect}" 
      end

      if x = document[:stats]
        fh.puts ":stats:"
        x.keys.sort { | a, b | a.to_s <=> b.to_s }.
        each do | k |
          v = x[k]
          fh.puts "  #{k.inspect}: #{v.inspect}"
        end
      end

      if document[:contents]
        document[:contents_count] = document[:contents].size
        fh.puts <<"END"
:contents_count: #{document[:contents_count]}
:contents_columns: #{document[:contents_columns].inspect}
:contents: 
END
        row_i = -1
        document[:contents].each do | r |
          case r
          when Hash
            r = cols.map { | c | r[c] }
          when Array
            #
          when ActiveRecord::Base
            r = cols.map do | c | 
              v = r.send(c)
              if ActiveRecord::Base === v
                v = v.code if v.respond_to?(:code)
              end
              v
            end
          else
            raise ArgumentError
          end
          
          fh.puts "# #{row_i += 1}" if options[:row_id]

          cols.each_with_index do | c, i |
            v = r[i]
            fh.write "#{i == 0 ? '-' : ' '} - "
            
            case c
            when :data
              if (v =~ /\n/)
                fh.puts <<"END"
|
    #{v.gsub(/(\r?\n)/){|x| x + "    "}}
END
              else
                fh.puts <<"END"
"#{v.gsub(/([\\\"])/){|x| '\\' + x }}"
END
              end
            when :content_key
              fh.puts "#{v.inspect}"
            when :version, :id, :uuid, :md5sum
              fh.puts "#{v}"
            else
              fh.puts ":#{v.inspect}"
            end
          end
        end
      end

      fh
    end
  end # class
end # module

