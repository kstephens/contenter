# Add your own tasks in files placed in lib/tasks ending in .rake,
# for example lib/tasks/capistrano.rake, and they will automatically be available to Rake.

require(File.join(File.dirname(__FILE__), 'config', 'boot'))

require 'rake'
require 'rake/testtask'
require 'rake/rdoctask'

require 'tasks/rails'

# See issue 74819 for when these hacktacular tasks became necessary
task :environment => [ :disable_introspection ]
task :test => [ :enable_introspection, :spec ]

task :disable_introspection do
  ENV["NO_INTROSPECTION"] = "1"
  $stderr.puts "Disabling introspection to allow requiring environment in db related tasks"
end

task :enable_introspection do
  ENV.delete "NO_INTROSPECTION"
  $stderr.puts "Re-enabling introspection to allow requiring environment in db related tasks"
end

namespace :db do

  desc "Because Rails sucks at creating databases."
  task :create_it do
    dbs = ENV['db'] || ''
    dbs = dbs.split(/\s*,\s*|\s+/)
    if ! (re = ENV['RAILS_ENV']).blank? 
      dbs = [ re ] if dbs.empty?
    else
      dbs = [ :test, :development ] if dbs.empty?
    end

    database_yaml = YAML::load_file('config/database.yml')
    dbs = dbs.map do | x |
      x = x.to_s
      h = database_yaml[x] || { }
      h['name'] = x
      h
    end
    dbs.each do | db |
      database, username, password = db['database'], db['username'], db['password']

      sh %Q{sudo -u postgres psql -c "CREATE USER #{username} PASSWORD '#{password}'" || true}
      if db['name'] == 'test'
        # Why? Because "rake test" *always* drops and creates a new database.
        sh %Q{sudo -u postgres psql -c "ALTER ROLE #{username} WITH SUPERUSER"}
      end
      sh %Q{sudo -u postgres psql -c "DROP DATABASE #{database}" || true}
      sh %Q{sudo -u postgres psql -c "CREATE DATABASE #{database}"}
      sh %Q{sudo -u postgres psql -c "ALTER DATABASE #{database} OWNER TO #{username}"}
      sh %Q{sudo -u postgres psql -c "GRANT ALL ON DATABASE #{database} TO #{username}"}
    end
  end

end # namespace


namespace :contenter do
  desc 'import a bulk yaml file into contenter: file= option required'
  task :load_yaml => [ :environment ] do
    host = ENV['host'] || `hostname`.chomp
    file = ENV['file'] || (raise ArgumentError, 'file not given')
    file = File.expand_path(file)
    api = Content::API.
      new({
            :log => $stderr, 
            :comment => "From file:///#{host}#{file}",
            # :error_on_update => true,
          })
    result = api.load_from_yaml_file(file).result
    puts result.to_yaml
  end

  desc 'import a bulk yaml file into contenter via api/update: file= option required'
  task :upload_yaml => [ :environment ] do
    file = ENV['file'] || (raise ArgumentError, 'file not given')
    sh "curl -i --upload-file #{file.inspect} http://localhost:3000/api/update"
  end

  desc 'configure contenter_gui for apache using mod_passenger: host= option required'
  task :apache_config do 
    host = ENV['host'] || `hostname`.chomp
    env  = ENV['env'] || 'production'
    ldap = ENV['ldap'] || 'ldaps://ldap01.obr.cashnetusa.com:636/ou=people,dc=cashnetusa,dc=com ldaps://ldap02.obr.cashnetusa.com:636/ou=people,dc=cashnetusa,dc=com ldaps://ldap01.chi.cashnetusa.com:636/ou=people,dc=cashnetusa,dc=com'
    ldap &&= ldap.split(/\s+/)

    $stderr.puts "  env = #{env.inspect}"

    dir = ENV['PWD'] || File.expand_path(File.dirname(__FILE__))
    conf_file = "#{dir}/apache2/contenter.conf"
    sh "mkdir -p #{File.dirname(conf_file)}"
    File.open(conf_file, "w") do | fh |
      fh.puts <<"END"
PassengerLogLevel 1
RailsAutoDetect on

# Redirect all http to https:
<VirtualHost *:80>
  ServerAdmin webmaster@#{host}
  ServerName #{host}
  RewriteEngine On
  RewriteCond %{HTTPS} !=on
  RewriteRule ^(.*) https://%{SERVER_NAME}$1 [R,L]
</VirtualHost>

<IfModule mod_ssl.c>
<VirtualHost *:443>
	ServerAdmin webmaster@#{host}
	ServerName #{host}
	DocumentRoot #{dir}/public
        RailsSpawnMethod smart
	RailsEnv #{env}

	LogLevel warn

	CustomLog /var/log/apache2/ssl_access.log combined

	SSLEngine on

	SSLCertificateFile    /etc/ssl/certs/apache.crt
	SSLCertificateKeyFile /etc/ssl/private/apache.key

	<FilesMatch "\.(cgi|shtml|phtml|php)$">
		SSLOptions +StdEnvVars
	</FilesMatch>
	<Directory /usr/lib/cgi-bin>
		SSLOptions +StdEnvVars
	</Directory>

	BrowserMatch ".*MSIE.*" \
		nokeepalive ssl-unclean-shutdown \
		downgrade-1.0 force-response-1.0

</VirtualHost>
</IfModule>

LDAPVerifyServerCert off

<Location "/">
  Order deny,allow
  Deny from All
  AuthName "#{host}"

  AuthType Basic
  AuthBasicProvider ldap
  AuthUserFile /dev/null

  #{ldap.map{|x| "AuthLDAPURL \"#{x}\""}.join("\n  ")}

  AuthzLDAPAuthoritative off
  Require ldap-group cn=user,ou=jabber,ou=groups,dc=cashnetusa,dc=com
  Satisfy any
</Location>

END
    end

    sh "sudo ln -sf #{conf_file} /etc/apache2/sites-enabled/"
    puts "remove /etc/apache2/sites-enabled/000-default"
  end

end # namespace


task :gem_list do
  sh "gem list | tee gem_list.txt"
end

