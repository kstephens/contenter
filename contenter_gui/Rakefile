# Add your own tasks in files placed in lib/tasks ending in .rake,
# for example lib/tasks/capistrano.rake, and they will automatically be available to Rake.

require(File.join(File.dirname(__FILE__), 'config', 'boot'))

require 'rake'
require 'rake/testtask'
require 'rake/rdoctask'

require 'tasks/rails'
require 'tasks/db_backup'

# Load plugins tasks!
Dir["vendor/plugins/*/lib/tasks/init.rb"].each do | f |
  load f
end

task :test => [ :spec, :other_test_dirs ]

task :other_test_dirs do 
  ENV.delete('file')
  [
   "../garm_core",
   "../garm_api",
   "../garm", # rename garm_web
   "../contenter_api",
   "../../contenter_api",
   "../cabar_core",
   "../../cabar/comp/cabar_core",
  ].each do | dir |
    if File.exists?(dir)
      sh "cd #{dir.inspect} && rake test"
    end
  end
end


task :add_PATH_for_test_tools do
  # Debian wants gem scripts in /var/lib/gems/X.Y/bin/
  path ="/var/lib/gems/#{RUBY_VERSION.sub(/\.\d+$/, '')}/bin"
  ENV['PATH'] = "#{ENV['PATH']}:#{path}" unless ENV['PATH'].include?(path)
  $stderr.puts "PATH = #{ENV['PATH']}"
end

task :add_PATH_for_postgres do
  path = "/opt/local/lib/postgresql91/bin/"
  ENV['PATH'] = "#{ENV['PATH']}:#{path}" unless ENV['PATH'].include?(path)
  $stderr.puts "PATH = #{ENV['PATH']}"
end

namespace :spec do
  task :rcov => [ :add_PATH_for_test_tools ]
end

namespace :db do

  desc "Because Rails sucks at creating databases."
  task :create_it => [ :add_PATH_for_postgres ] do
    dbs = ENV['db'] || ''
    dbs = dbs.split(/\s*,\s*|\s+/)
    if ! (re = ENV['RAILS_ENV']).blank? 
      dbs = [ re ] if dbs.empty?
    else
      dbs = [ :test, :development ] if dbs.empty?
    end

    database_yaml = YAML::load_file('config/database.yml')
    dbs = dbs.map do | x |
      x = x.to_s
      h = database_yaml[x] || { }
      h['name'] = x
      h
    end
    dbs.each do | db |
      database, username, password = db['database'], db['username'], db['password']

      sh %Q{sudo -u postgres psql -c "CREATE USER #{username} PASSWORD '#{password}'" || true}
      if db['name'] == 'test'
        # Why? Because "rake test" *always* drops and creates a new database.
        sh %Q{sudo -u postgres psql -c "ALTER ROLE #{username} WITH SUPERUSER"}
      end
      sh %Q{sudo -u postgres psql -c "DROP DATABASE #{database}" || true}
      sh %Q{sudo -u postgres psql -c "CREATE DATABASE #{database}"}
      sh %Q{sudo -u postgres psql -c "ALTER DATABASE #{database} OWNER TO #{username}"}
      sh %Q{sudo -u postgres psql -c "GRANT ALL ON DATABASE #{database} TO #{username}"}
    end
  end

  desc "Postgres Only - Gives you a console to the RDBMS, like script/dbconsole, but logs in automatically"
  task :console => [ :add_PATH_for_postgres ] do
    database_yaml = YAML::load_file('config/database.yml')
    db = database_yaml[ENV['env'] || RAILS_ENV] || raise("no config found")
    # require 'pp'; pp db
    ENV['PGPASSWORD'] = db['password']
    host = db['host']
    port = db['port']
    host &&= "-h #{host.inspect}"
    port &&= "-p #{port.inspect}"
    sh "psql #{host} #{port} -U #{db['username'].inspect} #{db['database'].inspect}"
  end

end # namespace


namespace :contenter do
  desc 'import a bulk yaml file into contenter: file= option required'
  task :load_yaml => [ :environment ] do
    host = ENV['host'] || `hostname`.chomp
    file = ENV['file'] || (raise ArgumentError, 'file not given')
    file = File.expand_path(file)
    api = Content::API.
      new({
            :log => $stderr, 
            :comment => "From file:///#{host}#{file}",
            # :error_on_update => true,
          })
    result = api.load_from_yaml_file(file).result
    puts result.to_yaml
  end

  CMS_URI = ENV['uri'] || 'http://localhost:3000/'

  desc 'import a bulk yaml file into contenter via api/update: file= option required'
  task :upload_yaml => [ :environment ] do
    file = ENV['file'] || (raise ArgumentError, 'file not given')
    uri = prepare_uri + 'api/update'
    sh "curl -i --upload-file #{file.inspect} #{uri}"
  end

  desc 'download a bulk yaml file from contenter via api/dump: file= option required'
  task :download_yaml => [ :environment ] do
    file = ENV['file'] || (raise ArgumentError, 'file not given')
    uri = prepare_uri + 'api/dump'
    curl_to_yaml "curl --silent --insecure --basic #{uri} > #{file.inspect}", file
  end

  desc 'configure contenter_gui for apache using mod_passenger: host= option required'
  task :apache_config do 
    host = ENV['host'] || `hostname`.chomp
    env  = ENV['env'] || 'production'
    ldap = ENV['ldap'] || 'ldaps://ldap01.obr.cashnetusa.com:636/ou=people,dc=cashnetusa,dc=com ldaps://ldap02.obr.cashnetusa.com:636/ou=people,dc=cashnetusa,dc=com ldaps://ldap01.chi.cashnetusa.com:636/ou=people,dc=cashnetusa,dc=com'
    ldap &&= ldap.split(/\s+/)

    $stderr.puts "  env = #{env.inspect}"

    dir = ENV['PWD'] || File.expand_path(File.dirname(__FILE__))
    conf_file = "#{dir}/apache2/contenter.conf"
    sh "mkdir -p #{File.dirname(conf_file)}"
    File.open(conf_file, "w") do | fh |
      fh.puts <<"END"
PassengerLogLevel 1
RailsAutoDetect on

# Redirect all http to https:
<VirtualHost *:80>
  ServerAdmin webmaster@#{host}
  ServerName #{host}
  RewriteEngine On
  RewriteCond %{HTTPS} !=on
  RewriteRule ^(.*) https://%{SERVER_NAME}$1 [R,L]
</VirtualHost>

<IfModule mod_ssl.c>
<VirtualHost *:443>
	ServerAdmin webmaster@#{host}
	ServerName #{host}
	DocumentRoot #{dir}/public
        RailsSpawnMethod smart
	RailsEnv #{env}

	LogLevel warn

	CustomLog /var/log/apache2/ssl_access.log combined

	SSLEngine on

	SSLCertificateFile    /etc/ssl/certs/apache.crt
	SSLCertificateKeyFile /etc/ssl/private/apache.key

	<FilesMatch "\.(cgi|shtml|phtml|php)$">
		SSLOptions +StdEnvVars
	</FilesMatch>
	<Directory /usr/lib/cgi-bin>
		SSLOptions +StdEnvVars
	</Directory>

	BrowserMatch ".*MSIE.*" \
		nokeepalive ssl-unclean-shutdown \
		downgrade-1.0 force-response-1.0

</VirtualHost>
</IfModule>

LDAPVerifyServerCert off

<Location "/">
  Order deny,allow
  Deny from All
  AuthName "#{host}"

  AuthType Basic
  AuthBasicProvider ldap
  AuthUserFile /dev/null

  #{ldap.map{|x| "AuthLDAPURL \"#{x}\""}.join("\n  ")}

  AuthzLDAPAuthoritative off
  Require ldap-group cn=user,ou=jabber,ou=groups,dc=cashnetusa,dc=com
  Satisfy any
</Location>

END
    end

    sh "sudo ln -sf #{conf_file} /etc/apache2/sites-enabled/"
    puts "remove /etc/apache2/sites-enabled/000-default"
  end

end # namespace


task :gem_list do
  sh "gem list | tee gem_list.txt"
end

namespace :gems do
  task :install => [:nonstandard_deps]
  desc "Installs gems or dependencies which cant be installed via the normal config.gem directive"
  task :nonstandard_deps do
    sh "sudo apt-get install libimage-size-perl"
    sh "sudo apt-get install netpbm"
    sh "sudo gem install --no-rdoc --no-ri archive-zip"
  end
end

namespace :test do
  desc "Sends an email through Action Mailer for the current RAILS_ENV, to the recipient passed as TO="
  task :email => [:environment] do
    raise "Specify a recipient using TO=" unless ENV["TO"]
    ContenterAcunote.config['enabled'] = true
    ContenterAcunote.config['to'] = ENV["TO"]
    vl = VersionList.first
    raise "Need at least one version list to test email" unless vl
    ContenterAcunote::IssueNotifier.deliver_version_list_saved( vl, 314159 )
    $stdout.puts "Email sent successfully to #{ENV['TO']}"
  end
end

### Support 
  def curl_to_yaml cmd, file = nil
    $stderr.puts "  #{cmd.sub(/:[^:@]+@/, ':...@')}"
    result = `#{cmd}`
    puts result
    result = File.read(file) if file
    result = YAML::load(result)
    if ((x = result[:errors]) && (! x.empty?)) ||
       ((x = result[:stats]) && (x = x[:errors]) && (x > 0))
      raise "FAILED" 
    end
    result
  end

  # Prepares the CMS URI with user@pass.
  def prepare_uri uri = nil
    user  = ENV['user'] || ENV['REAL_USER'] || ENV['USER']
    pass  = ENV['pass']

    uri ||= ENV['uri'] || CMS_URI
    uri = uri.gsub('//', '//#{user}@') unless uri =~ /\#\{user\}/
    uri = uri.gsub('#{user}', user)

    pass ||= prompt_password uri
    pass = pass.gsub(/./) { | x | '%%%02x' % x[0] }

    uri = uri.sub('@', ":#{pass}@")

    uri
  end


  # FIXME: Use Readline or something else here.
  def prompt_password prompt = ''
    prompt += ' ' unless prompt.empty?
    $stderr.write "  CMS: #{prompt}password: "
    system 'stty -echo'
    pass = $stdin.readline
    pass.chomp!
    pass
  ensure
    $stderr.write "\n"
    system 'stty echo'
  end
